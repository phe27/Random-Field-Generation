function covaa = dcvab2(thx, thy, var, ax, ay, bx, by)
%%
% DCVAB2: Return covariance between two 2-D local averages used by LAS2G.
%
%   This function evaluates the covariance between two local averages in 
%   two-dimensional space.
%
%   The covariance is obtained by a 20-pt Gaussian quadrature of a 4-D
%   integral.
%
% INPUTS:
%
%   thx:    correlation length in x-direction
%
%   thy:    correlation length in y-direction
%
%   var:    point variance
%
%   ax:     a two-element array with the two elements being the lower and
%           upper limits of the 1st local average in x-direction
%
%   ay:     a two-element array with the two elements being the lower and
%           upper limits of the 1st local average in y-direction
%
%   bx:     a two-element array with the two elements being the lower and
%           upper limits of the 2nd local average in x-direction
%
%   by:     a two-element array with the two elements being the lower and
%           upper limits of the 2ndt local average in y-direction
%
% OUTPUT:
%
%   covaa:  covariance between the two 2-D local averages
%
% -------------------------------------------------------------------------
% Author:       Dr Pengpeng He
% Organisation: University of Dundee
% Email:        phe001@dundee.ac.uk
% Website:
%   <a href="matlab: 
%   web('http://discovery.dundee.ac.uk/en/persons/pengpeng-he')">Author's Site</a>
% -------------------------------------------------------------------------
%
% Created:      Feb 16, 2024
% Version:      v1.0
% Revision history:
%  none
%

%%
% 20 points Gaussian quadrature
z = [-0.993128599185094924786; -0.963971927277913791268; ...
     -0.912234428251325905868; -0.839116971822218823395; ...
     -0.746331906460150792614; -0.636053680726515025453; ...
     -0.510867001950827098004; -0.373706088715419560673; ...
     -0.227785851141645078080; -0.076526521133497333755; ...
      0.076526521133497333755;  0.227785851141645078080; ...
      0.373706088715419560673;  0.510867001950827098004; ...
      0.636053680726515025453;  0.746331906460150792614; ...
      0.839116971822218823395;  0.912234428251325905868; ...
      0.963971927277913791268;  0.993128599185094924786];       % Points

w = [0.017614007139152118312;  0.040601429800386941331; ...
     0.062672048334109063570;  0.083276741576704748725; ...
     0.101930119817240435037;  0.118194531961518417312; ...
     0.131688638449176626898;  0.142096109318382051329; ...
     0.149172986472603746788;  0.152753387130725850698; ...
     0.152753387130725850698;  0.149172986472603746788; ...
     0.142096109318382051329;  0.131688638449176626898; ...
     0.118194531961518417312;  0.101930119817240435037; ...
     0.083276741576704748725;  0.062672048334109063570; ...
     0.040601429800386941331;  0.017614007139152118312];        % weights

% 64 points
% z = [-0.99930504173577213945690562; -0.9963401167719552793469245; ...
%      -0.99101337147674432073938238; -0.9833362538846259569312993; ...
%      -0.97332682778991096374185351; -0.96100879965205371891861412; ...
%      -0.94641137485840281606248149; -0.92956917213193957582149016; ...
%      -0.91052213707850280575638067; -0.88931544599511410585340404; ...
%      -0.86599939815409281976078339; -0.84062929625258036275169155; ...
%      -0.81326531512279755974192334; -0.78397235894334140761022053; ...
%      -0.75281990726053189661186378; -0.7198818501716108268489402; ...
%      -0.68523631305423324256355837; -0.64896547125465733985776123; ...
%      -0.61115535517239325024885297; -0.57189564620263403428387812; ...
%      -0.5312794640198945456580139;  -0.4894031457070529574785263; ...
%      -0.4463660172534640879849477;  -0.4022701579639916036957668; ...
%      -0.35722015833766811595044262; -0.3113228719902109561575127; ...
%      -0.26468716220876741637396417; -0.21742364374000708414964875; ...
%      -0.16964442042399281803731363; -0.12146281929612055447037646; ...
%      -0.0729931217877990394495429;  -0.02435029266342443250895584; ...
%       0.02435029266342443250895584;  0.07299312178779903944954294; ...
%       0.12146281929612055447037646;  0.16964442042399281803731363; ...
%       0.21742364374000708414964875;  0.2646871622087674163739642; ...
%       0.3113228719902109561575127;   0.35722015833766811595044262; ...
%       0.40227015796399160369576677;  0.4463660172534640879849477; ...
%       0.48940314570705295747852631;  0.5312794640198945456580139; ...
%       0.5718956462026340342838781;   0.61115535517239325024885297; ...
%       0.64896547125465733985776123;  0.68523631305423324256355837; ...
%       0.71988185017161082684894022;  0.75281990726053189661186378; ...
%       0.78397235894334140761022053;  0.81326531512279755974192334; ...
%       0.8406292962525803627516915;   0.86599939815409281976078339; ...
%       0.88931544599511410585340404;  0.91052213707850280575638067; ...
%       0.9295691721319395758214902;   0.9464113748584028160624815; ...
%       0.9610087996520537189186141;   0.9733268277899109637418535; ...
%       0.9833362538846259569312993;   0.9910133714767443207393824; ...
%       0.9963401167719552793469245;   0.9993050417357721394569056];
% 
% w = [0.0017832807216964329472961;  0.0041470332605624676352875; ...
%      0.00650445796897836285611736; 0.0088467598263639477230309; ...
%      0.01116813946013112881859049; 0.01346304789671864259806077; ...
%      0.015726030476024719321966;   0.0179517157756973430850453; ...
%      0.02013482315353020937234032; 0.02227017380838325415929833; ...
%      0.02435270256871087333817755; 0.0263774697150546586716918; ...
%      0.0283396726142594832275113;  0.03023465707240247886797406; ...
%      0.0320579283548515535854675;  0.03380516183714160939156548; ...
%      0.0354722132568823838106931;  0.0370551285402400460404151; ...
%      0.0385501531786156291289625;  0.039953741132720341386656926; ...
%      0.0412625632426235286101563;  0.04247351512365358900733977; ...
%      0.04358372452932345337682786; 0.04459055816375656306013471; ...
%      0.045491627927418144479771;   0.04628479658131441729595325; ...
%      0.0469681828162100173253263;  0.04754016571483030866228221; ...
%      0.04799938859645830772812618; 0.04834476223480295716976953; ...
%      0.04857546744150342693479907; 0.04869095700913972038336539; ...
%      0.04869095700913972038336539; 0.04857546744150342693479907; ...
%      0.04834476223480295716976953; 0.0479993885964583077281262; ...
%      0.04754016571483030866228221; 0.0469681828162100173253263; ...
%      0.04628479658131441729595325; 0.045491627927418144479771; ...
%      0.0445905581637565630601347;  0.0435837245293234533768279; ...
%      0.0424735151236535890073398;  0.0412625632426235286101563; ...
%      0.0399537411327203413866569;  0.0385501531786156291289625; ...
%      0.0370551285402400460404151;  0.0354722132568823838106931; ...
%      0.0338051618371416093915655;  0.0320579283548515535854675; ...
%      0.0302346570724024788679741;  0.0283396726142594832275113; ...
%      0.0263774697150546586716918;  0.0243527025687108733381776; ...
%      0.02227017380838325415929833; 0.02013482315353020937234032; ...
%      0.0179517157756973430850453;  0.015726030476024719321966; ...
%      0.01346304789671864259806077; 0.01116813946013112881859049; ...
%      0.00884675982636394772303091; 0.00650445796897836285611736; ...
%      0.00414703326056246763528754; 0.00178328072169643294729608];

a1x = ax(1);                    % lower limit for 1st area in x-direct
a2x = ax(2);
a1y = ay(1);                    % lower limit for 1st area in y-direct
a2y = ay(2);
b1x = bx(1);                    % lower limit for 2nd area in x-direct
b2x = bx(2);
b1y = by(1);                    % lower limit for 2nd area in y-direct
b2y = by(2);

% Gaussian quadrature
eta2z = a1y + 0.5*(a2y-a1y)*(1+z);
t2z   = b1y + 0.5*(b2y-b1y)*(1+z);
eta1z = a1x + 0.5*(a2x-a1x)*(1+z);
t1z   = b1x + 0.5*(b2x-b1x)*(1+z);

[t1zd, t2zd, eta1zd, eta2zd] = ndgrid(t1z, t2z, eta1z, eta2z);
[wd1, wd2, wd3, wd4] = ndgrid(w, w, w, w);

crfun = corrfun(thx, thy);
covaa = wd1 .* wd2 .* wd3 .* wd4 .* crfun(t1zd, t2zd, eta1zd, eta2zd);
% covaa = integral2(@(t1,t2)arrayfun(@(t1,t2)integral2(...
%         @(eta1,eta2)crfun(t1,t2,eta1,eta2), ax(1),ax(2), ay(1),ay(2)), t1,t2), ...
%         bx(1),bx(2), by(1),by(2));

covaa = sum(covaa(:)) * var / 16;



